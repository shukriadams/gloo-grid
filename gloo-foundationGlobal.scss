// contains code from Foundation by ZURB
// foundation.zurb.com
// Licensed under MIT Open Source

// $base-line-height is 24px while $base-font-size is 16px
$base-line-height: 1.5 !default;

// @mixins
//
// We use this to add box-sizing across browser prefixes
@mixin box-sizing($type:border-box) {
  -webkit-box-sizing: $type; // Android < 2.3, iOS < 4
  -moz-box-sizing: $type;
  box-sizing: $type; // Chrome, IE 8+, Opera, Safari 5.1
}

// We use this to do clear floats
@mixin clearfix {
  &:before, &:after { content: " "; display: table; }
  &:after { clear: both; }
}

// We use these to control text direction settings
$text-direction: ltr !default;
$default-float: left !default;
$opposite-direction: right !default;
@if $text-direction == ltr {
  $default-float: left;
  $opposite-direction: right;
} @else {
  $default-float: right;
  $opposite-direction: left;
}

// We use this to control whether or not CSS classes come through in the gem files.

$include-html-classes: true !default;
$include-print-styles: true !default;
$include-html-global-classes: $include-html-classes !default;

// Media Query Ranges
$small-range: (0, 40em) !default;
$medium-range: (40.0625em, 64em) !default;
$large-range: (64.0625em, 90em) !default;
$xlarge-range: (90.0625em, 120em) !default;
$xxlarge-range: (120.0625em, 99999999em) !default;


$screen: "only screen" !default;

$landscape: "#{$screen} and (orientation: landscape)" !default;
$portrait: "#{$screen} and (orientation: portrait)" !default;

$small-up: $screen !default;
$small-only: "#{$screen} and (max-width: #{gloo-utils-upper-bound($small-range)})" !default;

$medium-up: "#{$screen} and (min-width:#{gloo-utils-lower-bound($medium-range)})" !default;
$medium-only: "#{$screen} and (min-width:#{gloo-utils-lower-bound($medium-range)}) and (max-width:#{gloo-utils-upper-bound($medium-range)})" !default;

$large-up: "#{$screen} and (min-width:#{gloo-utils-lower-bound($large-range)})" !default;
$large-only: "#{$screen} and (min-width:#{gloo-utils-lower-bound($large-range)}) and (max-width:#{gloo-utils-upper-bound($large-range)})" !default;

$xlarge-up: "#{$screen} and (min-width:#{gloo-utils-lower-bound($xlarge-range)})" !default;
$xlarge-only: "#{$screen} and (min-width:#{gloo-utils-lower-bound($xlarge-range)}) and (max-width:#{gloo-utils-upper-bound($xlarge-range)})" !default;

$xxlarge-up: "#{$screen} and (min-width:#{gloo-utils-lower-bound($xxlarge-range)})" !default;
$xxlarge-only: "#{$screen} and (min-width:#{gloo-utils-lower-bound($xxlarge-range)}) and (max-width:#{gloo-utils-upper-bound($xxlarge-range)})" !default;

@include gloo-utils-exports("global") {

  // Meta styles are included in all builds, as they are a dependancy of the Javascript.
  // Used to provide media query values for javascript components.
  // Forward slash placed around everything to convince PhantomJS to read the value.

  meta.foundation-version {
    font-family: "/{{VERSION}}/";
  }

  meta.foundation-mq-small {
    font-family: "/" + unquote($small-up) + "/";
    width: gloo-utils-lower-bound($small-range);
  }

  meta.foundation-mq-small-only {
    font-family: "/" + unquote($small-only) + "/";
    width: gloo-utils-lower-bound($small-range);
  }

  meta.foundation-mq-medium {
    font-family: "/" + unquote($medium-up) + "/";
    width: gloo-utils-lower-bound($medium-range);
  }

  meta.foundation-mq-medium-only {
    font-family: "/" + unquote($medium-only) + "/";
    width: gloo-utils-lower-bound($medium-range);
  }

  meta.foundation-mq-large {
    font-family: "/" + unquote($large-up) + "/";
    width: gloo-utils-lower-bound($large-range);
  }

  meta.foundation-mq-large-only {
    font-family: "/" + unquote($large-only) + "/";
    width: gloo-utils-lower-bound($large-range);
  }

  meta.foundation-mq-xlarge {
    font-family: "/" + unquote($xlarge-up) + "/";
    width: gloo-utils-lower-bound($xlarge-range);
  }

  meta.foundation-mq-xlarge-only {
    font-family: "/" + unquote($xlarge-only) + "/";
    width: gloo-utils-lower-bound($xlarge-range);
  }

  meta.foundation-mq-xxlarge {
    font-family: "/" + unquote($xxlarge-up) + "/";
    width: gloo-utils-lower-bound($xxlarge-range);
  }



  @if $include-html-global-classes {

    // Must be 100% for off canvas to work
    html, body { height: 100%; }

    // Set box-sizing globally to handle padding and border widths
    html {
      box-sizing: border-box;
    }
    *,
    *:before,
    *:after {
      @include box-sizing(inherit);
    }

    // Grid Defaults to get images and embeds to work properly
    img { max-width: 100%; height: auto; }

    img { -ms-interpolation-mode: bicubic; }

    #map_canvas,
    .map_canvas,
    .mqa-display {
      img,
      embed,
      object { max-width: none !important;
      }
    }

    // Miscellaneous useful HTML classes
    .left { float: left !important; }
    .right { float: right !important; }
    .clearfix { @include clearfix; }

    // Hide visually and from screen readers
    .hide {
      display: none;
    }

    // Hide visually and from screen readers, but maintain layout
    .invisible { visibility: hidden; }
  }
}